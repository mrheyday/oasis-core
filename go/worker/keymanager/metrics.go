package keymanager

import (
	"sync"

	"github.com/prometheus/client_golang/prometheus"
)

var (
	computeRuntimeCount = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "oasis_worker_keymanager_compute_runtime_count",
			Help: "Number of compute runtimes using the key manager.",
		},
		[]string{"runtime"},
	)

	policyUpdateCount = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "oasis_worker_keymanager_policy_update_count",
			Help: "Number of key manager policy updates.",
		},
		[]string{"runtime"},
	)

	consensusEphemeralSecretEpochNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_consensus_ephemeral_secret_epoch_number",
			Help: "Epoch number of the latest ephemeral secret.",
		},
		[]string{"runtime"},
	)

	consensusMasterSecretGenerationNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_consensus_master_secret_generation_number",
			Help: "Generation number of the latest master secret.",
		},
		[]string{"runtime"},
	)

	consensusMasterSecretRotationEpochNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_consensus_master_secret_rotation_epoch_number",
			Help: "Epoch number of the latest master secret rotation.",
		},
		[]string{"runtime"},
	)

	consensusMasterSecretProposalEpochNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_consensus_master_secret_proposal_epoch_number",
			Help: "Epoch number of the latest master secret proposal.",
		},
		[]string{"runtime"},
	)

	consensusMasterSecretProposalGenerationNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_consensus_master_secret_proposal_generation_number",
			Help: "Generation number of the latest master secret proposal.",
		},
		[]string{"runtime"},
	)

	enclaveEphemeralSecretEpochNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_enclave_ephemeral_secret_epoch_number",
			Help: "Epoch number of the latest ephemeral secret loaded into the enclave.",
		},
		[]string{"runtime"},
	)

	enclaveMasterSecretGenerationNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_enclave_master_secret_generation_number",
			Help: "Generation number of the latest master secret as seen by the enclave.",
		},
		[]string{"runtime"},
	)

	enclaveMasterSecretProposalEpochNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_enclave_master_secret_proposal_epoch_number",
			Help: "Epoch number of the latest master secret proposal loaded into the enclave.",
		},
		[]string{"runtime"},
	)

	enclaveMasterSecretProposalGenerationNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_enclave_master_secret_proposal_generation_number",
			Help: "Generation number of the latest master secret proposal loaded into the enclave.",
		},
		[]string{"runtime"},
	)

	enclaveGeneratedMasterSecretEpochNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_enclave_generated_master_secret_epoch_number",
			Help: "Epoch number of the latest master secret generated by the enclave.",
		},
		[]string{"runtime"},
	)

	enclaveGeneratedMasterSecretGenerationNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_enclave_generated_master_secret_generation_number",
			Help: "Generation number of the latest master secret generated by the enclave.",
		},
		[]string{"runtime"},
	)

	enclaveGeneratedEphemeralSecretEpochNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_enclave_generated_ephemeral_secret_epoch_number",
			Help: "Epoch number of the latest ephemeral secret generated by the enclave.",
		},
		[]string{"runtime"},
	)
	churpThresholdNumber = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "oasis_worker_keymanager_churp_threshold_number",
			Help: "Degree of the secret-sharing polynomial",
		},
		[]string{"runtime", "churp"},
	)
	churpExtraSharesNumber = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_churp_extra_shares_number",
			Help: "Minimum number of extra shares.",
		},
		[]string{"runtime", "churp"},
	)
	churpHandoffNumber = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "oasis_worker_keymanager_churp_handoff_number",
			Help: "Epoch number of the last handoff",
		},
		[]string{"runtime", "churp"},
	)
	churpNextHandoffNumber = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "oasis_worker_keymanager_churp_next_handoff_number",
			Help: "Epoch number of the next handoff",
		},
		[]string{"runtime", "churp"},
	)
	churpHandoffInterval = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_churp_handoff_interval",
			Help: "Handoff interval in epochs",
		},
		[]string{"runtime", "churp"},
	)
	churpCommitteeSize = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_churp_committee_size",
			Help: "Number of nodes in the committee",
		},
		[]string{"runtime", "churp"},
	)
	churpSubmittedApplicationsTotal = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_churp_submitted_applications_total",
			Help: "Number of submitted applications",
		},
		[]string{"runtime", "churp"},
	)
	churpConfirmedApplicationsTotal = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "oasis_worker_keymanager_churp_confirmed_applications_total",
			Help: "Number of confirmed applications",
		},
		[]string{"runtime", "churp"},
	)
	churpEnclaveRPCLatency = prometheus.NewSummaryVec(
		prometheus.SummaryOpts{
			Name: "oasis_worker_keymanager_churp_enclave_rpc_latency_seconds",
			Help: "Latency of enclave rpc calls in seconds.",
		},
		[]string{"runtime", "churp", "method"},
	)
	churpEnclaveRPCFailures = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "oasis_worker_keymanager_churp_enclave_rpc_failures_total",
			Help: "Number of failed enclave rpc calls.",
		},
		[]string{"runtime", "churp", "method"},
	)

	keymanagerWorkerCollectors = []prometheus.Collector{
		computeRuntimeCount,
		policyUpdateCount,
		consensusEphemeralSecretEpochNumber,
		consensusMasterSecretGenerationNumber,
		consensusMasterSecretRotationEpochNumber,
		consensusMasterSecretProposalEpochNumber,
		consensusMasterSecretProposalGenerationNumber,
		enclaveEphemeralSecretEpochNumber,
		enclaveMasterSecretGenerationNumber,
		enclaveMasterSecretProposalEpochNumber,
		enclaveMasterSecretProposalGenerationNumber,
		enclaveGeneratedMasterSecretEpochNumber,
		enclaveGeneratedMasterSecretGenerationNumber,
		enclaveGeneratedEphemeralSecretEpochNumber,
		churpThresholdNumber,
		churpExtraSharesNumber,
		churpHandoffNumber,
		churpNextHandoffNumber,
		churpHandoffInterval,
		churpCommitteeSize,
		churpSubmittedApplicationsTotal,
		churpConfirmedApplicationsTotal,
		churpEnclaveRPCLatency,
		churpEnclaveRPCFailures,
	}

	metricsOnce sync.Once
)

func initMetrics() {
	metricsOnce.Do(func() {
		prometheus.MustRegister(keymanagerWorkerCollectors...)
	})
}
